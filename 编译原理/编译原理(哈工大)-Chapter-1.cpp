第一章 绪论
1-1 什么是编译
  计算机程序设计语言及编译
    高级语言 x = 2
    汇编语言 引入助记符 （MOV, X, 2）
    机器语言 C706 0000 0002

    汇编语言         ->            机器语言 
              汇编(Assembling)

    高级语言         ->            汇编语言
               编译(Compiling)

    高级语言         ->            机器语言
               编译(Compiling)
    编译：将高级语言翻译成汇编语言或机器语言的过程
            源语言         目标语言

  编译器在语言处理系统中的位置
    源程序  --------------------->  经过预处理的源程序
            预处理器(Preprocessor)
    
    ------> 汇编语言程序 -----------------> 可重定位的机器代码   可重定位(Rclocatable)：在内存中存放的起始位置L不是固定的
    编译器               汇编器(Assembler)

    ----------------------------> 目标机器代码                   起始地址 + 相对地址 = 绝对地址
    链接器(Linker)/加载器(Loader)                                加载器：修改可重定位地址；将修改后的指令和数据放到内存中适当的位置
                                                                 链接器：将多个可重定位的机器代码文件（包括库文件）连接到一起
								         解决外部内存地址问题

1-2 编译系统的结构
  编译系统的结构
    输入：    高级语言程序
    处理工具：编译器
    输出：    汇编语言程序/机器语言程序

  人工英汉翻译的例子：
    In the room, he broke a window with a hammer.
    
    源语言句子 ------>       第1步 分析源语言     ---------->   句子的语义   -----> 第2步 生成目标语言 -----> 目标语言句子
                       语义分析(Semantic Analysis)              中间表示，
		                                              独立于具体语言
                       语法分析(Snytax Analysis)

                       词法分析(Lexical Analysis)
  编译器的结构
    字符流 --> [词法分析器] ---> 词法单元流 ---> [语法分析器] ---> 语法树 ---> [语义分析器] ---> 语法树 ---> [中间代码生成器] ---> 中间表示形式 ---> [机器无关代码优化器]     //(*)语法制导翻译(Syntax Directed Translation)
    |----------------------------------------   分析部分/前端                -----------------------------------------------|
                                                与源语言相关(front end)
    
    ---> 中间表示形式 ---> [目标代码生成器] ---> 目标机器语言 ---> [机器相关代码优化器] ---> 目标机语言  
                           |---------------综合部分/后端(back end)：与目标语言相关----|

1-3 词法分析概述
  词法分析/扫描(Scanning)

    (*)词法分析的主要任务
    从左向右逐行扫描源程序的字符，识别出各个单词，确定单词的类型。将识别出的单词转换成统一的机内表示--词法单元(token)形式
    token:<种别码，属性值>
    -----------------------------------------------------------------------
    |   |  单词类型  |  种别                                 |  种别码    |
    -----------------------------------------------------------------------
    | 1 |   关键字   |  Program、if、else、then、...         |  一词一码  |
    -----------------------------------------------------------------------
    | 2 |   标识符   |  变量名、数组名、记录名、过程名、...  |  多词一码  |
    -----------------------------------------------------------------------
    | 3 |    常量    |  整型、浮点型、字符型、布尔型、...    |  一型一码  |
    -----------------------------------------------------------------------
    |   |            |  算术 ( + - * / ++ -- )               |  一词一码  |
    | 4 |    运算符  |  关系 ( > < == != >= <= )             |    或      |
    |   |            |  逻辑 ( & | ~ )                       |  一型一码  |
    -----------------------------------------------------------------------
    | 5 |   限界符   |  ; ( ) = { } ...                      |  一词一码  |
    -----------------------------------------------------------------------
    
    例：词法分析后得到的token序列
    输入： while( value != 100 ){num++;}
    输出：1  while  < WHILE , - >
          2  (      < SLP   , - >
	  3  value  < IDN   , value >
	  4  !=     < NE    , - >
	  5  100    < CONST , 100 >
	  6  )      < SRP   , - >
	  7  {      < LP    , - >
	  8  num    < IDN   , num >
	  9  ++     < INC   , - >
	  10 ;      < SEMI  , - >
	  11 }      < RP    , - >

1-4 语法分析概述
  语法分析(paring)
  (*)语法分析器(parser)从词法分析器输出的token序列中识别出各类短语，并构造语法分析树(parse tree)
     语法分析树描述了句子的语法结构
                                             句子
					     |   |
					  |--    --|
				|---------        句子
			|-------                  |   |
		 |------                     |----    ----------------|
	     |---	               |-----                      动词短语
	 |---                    |-----                            |       |
	 |                       |                                 |       --------------|
     介词短语                名词短语                        动词短语               介词短语
     |      |                    |                           |      |               |      |
     |    名词短语               |                    |------   名词短语      |-----    名词短语
  |--     |      |               |             |------          |      |      |         |      |
介词    冠词   名词    逗号    代词          动词             冠词   名词   介词      冠词   名词    句号
 in      the    room    ,       he            broke             a   window  with       a     hammer   .


  例1：赋值语句的分析树
     position     =     initial      +       rate      *       60     ; 
  <id,position>  <=>  <id,initial>   <+>   <id,rate>  <*>  <num,60>  <;>


                                                                    赋值语句
                          |--------------------------------------------|----------------------------|------------------------------|     
			标识符                                         =                          表达式                           ;
			                                          |---------------------------------|------------------|
			                                        表达式                              +                表达式
                                                                  |                                                    |
                                                                标识符            |------------------------------------|-----------------------|
							      (initial)         表达式                                 *                     表达式
							                          |                                                            |
										标识符                                                        数字
										(rate)                                                        (60)
  文法：
  <D>  -> <T><IDS>;
  <T>  -> int | real | char | bool
  <IDS> -> id | <IDS>,id

  输入：
  int a, b, c;
                                                                   <D>
						|-------------------|-------------------|
						|                   |                   |
					       <T>                <IDS>                 ;
					        |       |-----------|-------|
					       int    <IDS>         ,       id
					           |----|-----|             (c)
						 <IDS>  ,     id
						   |          (b)
						  id
						  (a)

1-5 语义分析
  (*)语义分析的主要任务
     1.收集标识符的属性信息

       (*)种属(Kind)
	  简单变量、复合变量(数组、记录、...)、过程、...

       (*)类型
          整型、实型、字符型、布尔型、指针型、...

       (*)存储位置、长度
       例：
       begin
           real x[8];
	   integer i,j;
	   ...
       end
       (*)值
       (*)作用域
       (*)参数和返回值信息
          参数个数、参数类型、参数传递方式、返回值类型、...
       
       (*)符号表(Symbol Table)
	  符号表是用于存放标识符的属性信息的数据结构
	  (*)字符串表
     
     2.语义检查
        (*)变量或过程未经声明就使用
	(*)变量或过程名重复声明
	(*)运算分量类型不匹配
	(*)操作符与操作数之间的类型不匹配
	   (*)数组下标不是整数
	   (*)对非数组变量使用数组访问操作符
	   (*)对非过程名使用过程调用操作符
	   (*)过程调用的参数类型或数目不匹配
	   (*)函数返回类型有误

1-6 中间代码生成及编译器后端概述
  1. 常用的中间表示形式
     三地址码(Three-address Code)
       三地址码由类似汇编语言的指令序列组成，每个指令最多有三个操作数(operand)
       -----------------------------------------------------------------------                                地址可以具有如下形式之一
       | 序号 |  指令类型  |  指令形式                                       |                                  源程序中的名字
       -----------------------------------------------------------------------                                  常量
       | 1    |  赋值指令  |  x = y op z                                     |                                  编译器生成的临时变量
       |      |            |  x = op y                                       |
       -----------------------------------------------------------------------
       | 2    |  复制指令  |  x = y                                          |
       -----------------------------------------------------------------------
       | 3    |  条件跳转  |  if x relop y goto n                            |
       -----------------------------------------------------------------------
       | 4    | 非条件跳转 |  goto n                                         |
       ----------------------------------------------------------------------- 
       | 5    |  参数传递  |  param x                                        |
       -----------------------------------------------------------------------
       | 6    |  过程调用  |  call p, n                                      |
       ----------------------------------------------------------------------- 
       | 7    |  过程返回  |  return x                                       |
       -----------------------------------------------------------------------
       | 8    |  数组引用  |  x = y[i]                                       |
       -----------------------------------------------------------------------
       | 9    |  数组赋值  |  x[i] = y                                       |
       -----------------------------------------------------------------------
       |      |  地址及    |  x =& y                                         |
       | 10   |  指针操作  |  x = *y                                         |
       |      |            |  *x = y                                         |
       -----------------------------------------------------------------------
    三地址指令的表示
      四元式(Quadruples)
	(op,y,z,x)
      三元式(Triples)
      间接三元式(Indirect triples)
    
    三地址指令的四元式表示
    x = y op z                     ( op, y, z, x )
    x = op y                       ( op, y, -, x )
    x = y                          ( = , y, -, x )
    if x relop y goto n            ( relop, x, y, n )
    goto n                         ( goto, -, -, n )
    param x                        ( param, -, -, x )
    call p,n                       ( call, p, n, - )
    return x                       ( return, -, -, x )
    x = y[i]                       ( =[], y, i, x )
    x[i] = y                       ( []=, y, x, i )
    x =& y                         ( &, y, -, x )
    x = *y                         ( =*, y, -, x )
    *x = y                         ( *=, y, -, x)
    
    三地址指令序列唯一确定了运算完成的顺序

    语法结构树/语法树(Syntax Trees)

  2.中间代码生成的例子

  3.目标代码生成
    目标代码生成以源程序的中间表示形式作为输入，并把它映射到目标语言
    目标代码生成的一个重要任务是为程序中使用的变量合理分配寄存器
  
  4.代码优化
    为改进代码所进行的等价程序互换，使其运行得更快一些、占用空间更少一些、或者二者兼顾
