第四章 语法分析
4-1 自顶向下分析概述
  1.自顶向下的分析(Top-Down Parsing)
    从分析树的顶部(根节点)向底部(叶节点)方向构造分析树
    可以看成是从文法开始符号S推导出词串w的过程
    
    在每一步的推导中，都需要做两个选择
      替换当前句型中的哪个非终结符
      用该非终结符的哪个候选式进行替换

  2.最左推导(Left-most Derivation)
    在最左推导中，总是选择每个句型的最左非终结符进行替换
    如果S=>lm a，则称a是当前文法的最左句型(left-sentential form)

  3.最右推导(Right-most Derivation)
    在最右推导中，总是选择每个句型的最右非终结符进行替换
    在自底向上的分析中，总是采用最左规约的方式，因此把最左规约称为规范规约，而最右推导相应地称为规范推导

  4.最左推导和最右推导的唯一性

  5.自顶向下的语法分析采用最左推导方式
    总是选择每个句型的最左非终结符进行替换
    根据输入流中的下一个终结符，选择最左非终结符的一个候选式

  6.自顶向下语法分析的通用形式
    递归下降分析(Recursive-Descent Parsing)
      由一组过程组成，每个过程对应一个非终结符
      从文法开始符号S对应的过程开始，其中递归调用文法中其它非终结符对应的过程。如果S对应的过程体恰好扫描了整个输入串，则成功完成语法分析

      可能需要回溯(backtracking),导致效率较低。

  7.预测分析(Predictiove Parsing)
    预测分析是递归下降分析技术的一个特例，通过在输入中向前看固定个数(通常为1)符号来选择正确的A-产生式
      可以对某类文法构造出向前看k个输入符号的预测分析器，该类文法有时也称为LL(k)文法类。

    预测分析不需要回溯，是一种确定的自顶向下分析方法

4-2 文法转换
  同一非终结符的多个候选式存在共同前缀，将导致回溯现象

  左递归文法会使递归下降分析器陷入无限循环
  含有A->Aa形式产生式的文法称为是直接左递归的(immediate left recursive)
  如果文法中有一个非终结符A可以使得对某个串a存在一个推导A=>+Aa,那么这个文法就是左递归的
  经过两部或两步以上推导产生的左递归称为是间接左递归

  1.消除直接左递归
    A->Aα|β(α!= ε，β不以A开头) r = βα*

    A->βA'
    A'->αA'|ε
    事实上，这种消除过程就是把左递归转换成了右递归

  2.消除直接左递归的一般形式
    A->Aa1|Aa2|...|Aan|β1|β2|...
          (ai != ε，β不以A开头)

    A->β1A'|β2A'|...|βmA'
    A'->a1A'|a2A'|...|anA'|ε
    消除左递归是要付出代价的----引进了一些非终结符和ε_产生式

  3.消除间接左递归

  4.提取左公因子(Left Fractoring)
    通过改写产生式来推迟决定，等读入了足够多的输入，获得足够信息后再做出正确的选择

4-3 LL1文法
  1.S_文法
    预测分析法的工作过程
      从文法开始符号出发，在每一步推导过程中根据当前句型的最左非终结符A和当前输入符号a，
      选择正确的A-产生式。为保证分析的确定性，选出的候选式必须是唯一的。
    S_文法(简单的确定性文法，Korenjak & Hopcroft, 1966)
      每个产生式的右部都以终结符开始
      同一个非终结符的各个候选式的首终结符都不同 S_文法不含ε产生式

    什么时候使用ε产生式？
    如果当前某非终结符A与当前输入符a不匹配时，若存在A->ε，可以通过检查a是否可以出现A的后面，
    来决定是否使用产生式A->ε(若文法中无A->ε，则应报错)

  2.非终结符的后继符号集
    非终结符的后继符号集
      可能在某个句型中紧跟在A后面的终结符a的集合，记为FOLLOW(A)
      FOLLOW(A) = {a| S=>*αAaβ，a∈Vt，α，β∈(Vt∪Vn)* }
    如果A是某个句型的最右符号，则将结束符"$"添加到FOLLOW(A)中

  3.产生的可选集
    产生式A->β的可选集是指可以选用该产生式进行推导时对应的输入符号的集合，记为SELECT(A->β)
    SELECT(A->aβ) = {a}
    SELECT(A->ε) = FOLLOW(A)
    
    q_文法
    每个产生式的右部或为ε，或以终结符开始
    具有相同左部的产生式有不相交的可选集
    q_文法不含右部以非终结符打头的产生式

  4.串首终结符集
    串首终结符
      串首第一个符号，并且是终结符。简称首终结符

    给定一个文法符号串α，α的串首终结符集FIRST(α)被定义为可以从α推导出的所有串首终结符构成的集合。
    如果α=> *ε，那么ε也在FIRST(α)中。

    产生式A->α的可选集SELECT
      如果ε!∈FIRST(α)，那么SELECT(A->α) = FIRST(α)
      如果ε∈FIRST(α)，那么SELECT(A->α) = (FIREST(α)-{ε} ) ∪ FOLLOW(A)

  5.LL(1)文法
    文法G是LL(1)的，当且仅当G的任意两个具有相同左部的产生式A->α|β满足下面的条件：
    如果α和β均不能推导出ε，则FIRST(α)∩FIRST(β) = 空集
    α和β至多有一个能推导出ε
    如果β=>*ε，则FIRST(α)∪FOLLOW(A) = 空集
    如果α => *ε，则FIRST(β)∩FOLLOW(A) = 空集
    同一非终结符的各个产生式的可选集互不相交
    可以为LL(1)文法构造预测分析器

    第一个"L"表示从左向右扫描输入
    第二个"L"表示产生最左推导
    "1"表示在每一步中只需要向前看一个输入符号来决定语法分析动作

4-4 FIRST集和FOLLOW集的计算
  1.计算文法符号X的FIRST(X)
    FIRST(X):可以从X推导出所有串首终结符构成的集合
    如果X=>*ε，那么ε∈FIRST(X)

  2.算法
    不断应用下列规则，直到没有新的终结符或ε可以被加入到任何FIRST集合中为止
      如果X是一个终结符，那么FIRST(X) = {X}
     
      如果X是一个非终结符，且X->Y1...Yk∈P(k>=1),那么如果对于某个i，α在FIRST(Yi)中且ε在所有的
      FIRST(Y1),...,FIRST(Yi-1)中(即Y1...Yi-1=>*ε),就把α加入到FIRST(X)中。如果对于所有的j = 1，2，... ，ε在
      FIRST(Yj)中，那么将ε加入到FIRST(X)
     
      如果X->ε∈P，那么将ε加入到FIRST(X)中

  3.计算串X1X2...Xn的FIRST集合
    向FIRST(X1X2...Xn)加入FIRST(X1)中所有的非ε符号
    如果ε在FIRST(X1)中，再加入FIRST(X2)中的所有非ε符号，如果ε再FIRST(X1)和FIRST(X2)中，再加入FIRST(X3)中的所有非ε符号，以此类推
    最后，如果所有的i，ε都在FIRST(Xi)中，那么将ε加入到FIRST(X1X2...Xn)中

  4.计算非终结符A的FOLLOW(A)
    FOLLOW(A)：可能在某个句型中紧跟在A后面的终结符a的集合
        FOLLOW(A) = {a| S=>*αAaβ，a∈Vt，α，β∈(Vt∪Vn)* }
    如果A是某句型的最右符号，则将结束符"S"添加到FOLLOW(A)中

  5.算法
    不断应用下列规则，直到没有新的终结符可以被加入到任何FOLLOW集合中为止
      将"$"放入FOLLOW(S)中，其中S是开始符号，"$"是输入右端的结束标记
      如果存在一个产生式A->αBβ，那么FIRST(β)中除ε之外的所有符号都在FOLLOW(B)中
      如果存在一个产生式A->αB，或存在产生式A->αBβ且FIRST(β)包含ε，那么FOLLOW(A)中的所有符号都在FOLLOW(B)中

  6.例：表达式文法各产生式的SELECT集

  7.预测分析表

  8.LL(1)文法的分析方法
    递归的预测分析法
    非递归的预测分析法
