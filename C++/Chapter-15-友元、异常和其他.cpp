本章内容包括：
  友元类
  友元类方法
  嵌套类
  引发异常、try块和catch块
  异常类
  运行阶段类型识别（RTTI）
  dynamic_cast 和 typeid
  static_cast 、 const_cast 和 reinterpret_cast

  15.1 友元
  类除了拥有友元函数，也可以将类作为友元
  友元类的所有方法都可以访问原始类的私有成员和保护成员，也可以作更严格的限制，可以只将特定的成员函数指定为另一个类的友元

  友元类
  遥控器和电视机是一组典型的友元类实例，即Tv类和Remote类

  友元成员函数
  可以选择特定的类成员成为另一个类的友元
  例如：让 Remote::set_chan() 成为Tv类的友元

  class Tv
  {
    friend void Remote::set_chan( Tv & t, int c );
    ...
  };

  避免循环依赖，选择前向声明，在Remote 定义前使用如下语句：
  class Tv;

  排列顺序如下：
  class Tv;
  class Remote { ... };
  class Tv { ... };

  在Remote类中，调用了 Tv 类中的内联函数，一般在Remote声明中只包含方法声明，定义实现放在Tv类定义后面。

  其他友元关系
  让类成为彼此对方的友元

  共同的友元
  可以将一个函数，设置为多个类共同的友元

  15.2 嵌套类
  C++中可以将类声明放在另一个类中，这样的声明的类被称为嵌套类，包含类的成员函数可以创建和使用被嵌套的对象。

  对类的嵌套与包含并不同，包含指的是将类杜象作为另一个类的成员，而对类嵌套不创建类成员，而是定义了一种类型

  嵌套类和访问权限
  在哪些地方可以使用嵌套类以及如何使用嵌套类，取决于作用域和访问控制

  在类中声明的嵌套类的声明如果在类的公有部分，则可以通过类的限定符来访问嵌套类，但是对于声明在类的私有部分的嵌套类，则只有在类内部才能访问。
  对于声明在共有部分的嵌套类，如下：
  class Team
  {
  public:
    class Coach { ... };;
    ...
  };

  如果要访问以上的内部类，可以使用下面的案例：
  Team::Coach forhire;

  模板中的嵌套
  将Queue类定义为模板时，不会因为它包含模板类而带来问题

  15.3 异常

  调用abort()
