本章内容包括：
  C++ 角度的输入和输出
  iostream 类系列
  重定向
  ostream 类方法
  格式化输出
  istream
  流状态
  文件 I/O
  使用 ifstream 类从文件输入
  使用 ofstream 类输出到文件
  使用 fstream 类进行文件输入和输出
  命令行处理
  二进制文件
  随机文件访问
  内核格式化

17.1 C++ 输入和输出概述
  标准输入输出包的头文件为 stdio.h , 在 C++ 中使用 cstdio.h 头文件来支持I / O 函数
  C++ 依赖与 C++ 的 I / O 解决方案，而不是C语言的I/O解决方案。
  C++ 的 I/O 解决方案是在头文件 iostream 和 fstream 中定义一组类。

  流和缓冲区
  C++把输入和输出看作字节流。
  输入时，程序从输入流中抽取字节
  输出时，程序将字节插入到输出流中
  流充当了程序和流源或流目标之间的桥梁

  管理输入包含两步：
  将流与输入去向的程序关联起来
  将流与文件连接起来
  输入流需要两个连接，每端各一个。文件端部提供了流的来源，程序端连接将流的流出部分转储到程序中。
  对输出的管理包括将输出流连接到程序以及将输出目标与流关联起来。

  C++ 程序通常在用户按下回车键时刷新缓冲区

  流、缓冲区和 iostream 文件
  streambuf 类为缓冲区提供了内存，并提供了用于填充缓冲区、访问缓冲区内容、刷新缓冲区和管理缓冲区内存的类方法
  ios_base 表示流的一般特征，如是否可读取、是二进制还是文本流等
  ios 类基于 ios_base, 其中包括了一个指向 streambuf 对象的指针成员
  ostream 类是从 ios 类派生来的，提供了输出方法
  istream 类也是从 ios 类派生而来的，提供了输入方法
  iostream 类是基于 istream 和 ostream 类的，因此继承了输入方法和输出方法

  wcout 对象用于输出宽字符流

  重定向
  输入重定向 <
  输出重定向 >

17.2 使用cout进行输出
  C++将输出看作字节流
  ostream 类将数据内部表示(二进制模式)转换为由字符字节组成的输出流

  重载的 << 运算符
  << 默认含义是按位左移运算符
  ostream 类重新定义了 << 运算符，方法是将其重载为输出。

  其它 ostream 方法
  除了各种 operator<<() 函数外， ostream 类还提供了 put() 方法和 write() 方法，前者显示字符，后者显示字符串
  put() 方法原型
  ostream & put( char );

  write() 方法显示整个字符串，模板原型如下：
  basic_ostream< charT, traits > & write( const char_type * s, streamsize n );
  第一个参数提供了要显示的字符串地址，第二个参数指出要显示多少个字符串
  write() 方法并不会在遇到空字符时自动停止打印字符，而只是打印指定数目的字符，即使超出了字符串的边界。

  刷新输出缓冲区

