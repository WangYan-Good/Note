7.1 复习函数的基本知识
  提供函数定义
  提供函数原型
  调用函数

  1.定义函数
  对于有返回值的函数，C++对于返回值的类型有一定的限制，不能是数组，但可以是其他任何类型，整型、浮点数、指针、甚至可以是结构和对象(虽然C++不能直接返回数组，但是可以将数组作为结构或对象组成部分来返回)
  
  通常，函数通过将返回值复制到指定的CPU寄存器或内存单元中来将其返回

  2.函数原型和函数调用
  函数原型一般隐藏在 include 文件中

  在C++中，不指定参数列表时应使用省略号：
  void func_name(...); // ...

  编译阶段进行的原型化被称为静态类型检查(static type checking).
  静态类型检查可捕获许多在运行阶段非常难以捕获的错误。

7.2 函数参数和按值传递
  C++标准使用参数(arguement)来表示实参，使用参量(parameter)来表示形参
  参数传递过程，即将参量赋给参数

7.3 函数和数组
  C++和C语言一样，也将数组名视为指针，但与指针不同的是：
  1.数组声明使用数组名来标记存储位置
  2.对数组名使用sizeof()将得到整个数组的长度
  3.将地址运算符用于数组名时，将返回整个数组的地址

  当将数组作为参数传递时，函数使用的是数组本身，而非数组元素的副本
  因此，对于数组元素在函数中的修改要慎重，一般为防止修改，在传递数组时会使用const限定

  在函数中，数组被当作指针对待，因此必须显示指明数组长度。

  指针和const
  1.让指针指向一个常量对象，防止使用该指针来修改所指向的值，例如：
  int age = 39;
  const int* p = &age;
  2.将指针本身声明为常量，防止改变指针的位置

  const int **pp2;
  int *p1;
  const int n = 13;
  pp2 = &p1;
  *pp2 = &n;
  *p1 = 10;

  上述代码将非const地址赋给了const指针,因此可以通过p1来修改const数据。
  仅当只有一层间接关系时，才可以将非const地址或指针赋给const指针

7.4 函数和二维数组
 
7.5 函数和C-风格字符串

7.6 函数和结构
  传递结构C++提供了三种方式：
  1.按值传递结构
  2.传递结构地址
  3.按引用传递

7.7 函数和string对象

7.8 函数与array对象
 
7.9 递归

7.10 函数指针
  1.获取函数地址
  需要区分传递的是函数的地址还是函数的返回值
  function1( func2 ); //address of func2()
  function1( func2() ); // passes return value of think()  

  2.声明一个函数指针
  func_type (*pf)(... );

  3.使用函数指针来调用函数
  auto 用于自动判断变量类型
  
  使用typedef进行简化,将p_fun 声明为下列函数指针类型的别名：
  typedef const double *(*p_fun)(...);

  p_fun p1 = f1;
 
