10.1 过程性编程和面向对象编程
  OOP:面向对象编程，从用户的角度考虑对象--描述对象所需的数据以及描述用户与数据交互所需的操作。
  完成对接口的描述后，需要确定如何实现接口和数据存储。

10.2 抽象和类
  类是一种将抽象转换为用户定义类型的C++工具，它包含了数据表示和数据操作

  接口是一个共享框架，供两个系统交互使用。

  数据隐藏是一种封装，将实现的细节隐藏在私有部分。
  封装的另一种形式：将类函数定义和类声明放在不同的文件中。

  OOP是一种编程风格，它属于任何一种语言。

  通常将类数据成员声明为私有，通用接口成员函数声明为公有。

  定义成员函数是，使用作用域解析运算符(::)来标识函数所属的类
  类方法可以访问类的私有数据成员。

  定义位于类声明中的函数都将自动成为内联函数
  另外，定义在类之外的成员函数也可以使用 inline 关键字，使其成为内联函数

  所创建的每个新对象都有自己的存储空间，用于存储其内部变量和类成员
  但同一个类的所有对象共享同一组类方法，每种方法只有一个副本

10.3 类的构造函数和析构函数
  类构造函数，专门用于构造新对象，将值赋给它们的数据成员
  构造函数的参数表示的不是类成员，而是赋给类成员的值

  默认构造函数：创建对象时为提供显示初始值时，C++会提供默认构造函数。
  默认构造函数没有参数

  析构函数用于清理过期对象
  析构函数声明时在类名前加上～，与构造函数不同的是，析构函数没有参数

  对于静态类对象，析构函数将在程序执行结束时自动被调用。
  对于自动存储类对象，则其析构函数将在程序执行完代码块时自动被调用。
  对于通过new创建的对象，其析构函数将在使用delete释放内存时被自动调用。

  const成员函数
  void classType::show() const;

10.4 this指针
  this指针指向用来调用成员函数的对象(this被作为隐藏参数传递给方法)。
  每个成员函数(包括构造函数和析构函数)都有一个this指针，this指针指向调用对象。
  如果方法需要引用整个调用对象，则可以使用表达式*this。

10.5 对象数组
  创建同一个类的多个对象，可以创建独立对象变量，也可以创建对象数组。
  声明对象数组的方法与声明标准类型数组相同


10.6 类作用域
  C++引用了一种新的作用域：类作用域
  在类中定义的名称的作用域都为整个类，作用域为整个类的名称只在类中是已知的，在类外是不可知的。
  在定义成员函数时，必须使用作用域解析运算符。
  在类声明或成员函数定义中，可以使用未修饰的成员名称(未限定的名称)。

  声明类只是描述了对象的形式，并没有创建对象，没有用于存储值的空间，有两种解决方法：
  1.在类中声明一个枚举
  不同枚举类型的枚举量可能会发生冲突，C++提供了新枚举，其枚举量的作用域为类，例如：
  enum class name { name1, name2, ... };
  也可以使用struct代替class

  在默认情况下，C++11作用域内枚举的底层类型为int
  C++还提供了另一种语法，可用于作出不同的选择,但是底层类型必须为整型：
  enum class : type name { name1, name2, ... };

  2.使用关键字static，该常量将与其他静态变量存储在一起，而不是存储在对象中

10.7 抽象数据类型( abstract data type, ADT )
  ADT以通用的方式描述数据类型，而没有引入语言或实现细节


