9.1 单独编译
  程序文件包含三个部分：
  头文件：包含结构声明和使用这些结构的函数原型
  源代码文件：包含与结构有关的函数的代码
  源代码文件：包含调用与结构相关的函数的代码

  软件包的构成：一个文件(头文件)包含了用户定义类型的定义，另一个文件包含操纵用户定义类型的函数的代码

  头文件中常包含的内容：
  函数原型
  使用#define或const定义的符号常量
  结构声明
  类声明
  模板声明
  内联声明

  如果文件名包含在尖括号中，例如<stdio.h>，则编译器将在存储标准头文件的主机系统中查找
  如果文件名包含在双引号中，例如"stdio.h"，则编译器将首先查找当前的工作目录或源代码目录，如果没有找到目标文件，则将在标准位置查找

  #include用于管理头文件，但是也同时导致多重声明
  可以使用#idndef(if not defined)来避免多次包含同一个头文件

9.2 存储持续性、作用域和链接性
  数据存储在内存中的时间区别
  自动存储连续性:函数定义中声明的变量，在函数开始执行时被创建，函数执行完毕时内存被释放
  静态存储持续性：在函数定义外定义的变量和使用关键字static定义的变量，它们在整个运行过程中都存在
  线程存储持续性：对于CPU处理多任务时使得程序能够将计算放在可并行处理的不同线程中，如果使用关键字thread_local声明，则其声明周期与所属的线程一样长
  动态存储持续性：使用new运算符分配的内存将一直存在，直到使用delete运算符将其释放或程序结束为止

  作用域(scope)：描述了名称在文件的多大范围内可见

  链接性(linkage)：描述了名称如何在不同单元间共享
  自动变量的名称没有链接性，因为它们不能共享

  在C++11中，关键字auto用于自动类型判断，它用于显式的指出变量为自动存储
  1.自动变量的初始化

  2.自动变量和栈
  一般保留一段内存，将其视为栈，栈具有LIFO(先进后出)的特性，用于保存临时变量

  3.寄存器变量
  关键字register最初由C语言引入，它建议编译器使用CPU寄存器来存储自动变量
  旨在提高访问变量的速度
  在C++11中，关键字register失去了提示作用，只是显示地指出变量是自动的。
