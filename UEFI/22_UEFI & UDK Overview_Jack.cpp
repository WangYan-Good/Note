UEFI & UDK

1. Agenda
  UEFI Overview
  UEFI Key Concepts
  UEFI Services
  UEFI Driver Model
  UEFI Legacy Support
  UDK Overview
  UDK Packages
  Documents & Spec
  Q & A

2. UEFI Overview
  UEFI means Unified Extensible Firmware Interface

  UEFI is an interface specification which abstructs BIOS from OS

  UEFI Complements existing interfaces.

  Modular and extensible.

  Provide efficient Option ROM replacement.

  Unified EFI (UEFI) Forum - www.uefi.org
  - Promoters OEM: Dell, HP, IBM, Lenove
  - IBVs: AMI, Insyde, Phoenix
  - AMD, Apple, Intel, Microsoft

  UEFI Specification EFI 1.10 specification contributed to the forum by Intel and Microsoft to be used as a  starting draft

  The latest UEFI specification is 2.6

  UEFI Forum will evolve, extend, and add any new funcitonality as required.

3. UEFI Key Concepts
  Objects - manage system state, including I / O devices, memory, and events
  UEFI System Table - data structure with data information tables to interface with the systems
  Handle Database and protocol s - callable interfaces that  are registered
  UEFI Images - the executable content format
  Events - the software can be signable in response to some other activity
  Device Paths -a data structure that describes the hardware location of an entity
  GUID is a globally Unique Identifier 128-bit quantity defined by Wired for Mandgement(WfM)2.0 specification **
  Used to identify protocols
  - 1:1 with interfaces
  It can be generated by GuidGen.exe tool:
    for example:
    {  XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX }

    UEFI Handle is pointer to one object
    All protocols have an associated handle
    Every device and executable image in UEFI has a handle in the handle database.
    Every boot device must have a device path protocol to describe it.

    UEFI Protocol is an interface structure, services which are identified by GUID:
      - DEVICE_PATH, DEVICE_IO, BLOCK_IO, DISK_IO, FILE_SYSTEM, SIMPLE_INPUT, SIMPLE_TEXT_OUTPUT, SERIAL IO,

      Device path is a data structure defcription of where a devcie is in the platform

      All boot devices, logical devices and images must be described by a UEFI device path

      The UEFI Specification defines six types of device paths

      Hardware - where is the device in the system
      ACPI - UID / HID of device in  AML
      Messaging - Classifies device as LAN, Fiber Channel, ATAPI, SCSI, USB, ...
      Media - i.e. Hard Drive, Floppy or CD - ROM
      BIOS Boot Specification - uesd to point to boot legacy operating systems
      End of hardware - marks end of device path

4. UEFI Driver Module
  UEFI Drivers extend firmware
  - Add support for new hardware
  - No dependence on OS or specific CPU architecture
  - Portable across platforms ( IA32, x64, Itanium, ... )
  - Reusable code leads to rapid platform development

  Supports complex bus hierarchies

  Driver Binding Protocol provides flexibility
  - Driver version management
  - Hot- plug and unload support

  Extensible to support future bus & device types

  In UEFI driver entry point it doesn't allowed to Touch Hardware Resources.

  In UEFI driver entry point it installs Driver Binding on Driver Image Handle.

5. UEFI Legacy Support
  CMS is a bridge between UEFI and legacy BIOS

  Booting a traditional or non-UEFI-aware OS

  Loading an UEFI-aware OS a device that is controlled by a traditional OpROM

  Legacy OpROM support will be require longer than legacy OS support

  CSM is optional ... a "pure" UEFI system can be built without CSM ( no legacy BIOS compatibility )

6. UDK Overview
  UDK means Intel UEFI Development Kit which is a stable release of portions of the EDK II project

  The latest UDK release version is UDK2015 and it can be downloaded from sourcesforge.net.

  The Technical changes of UDk compared to EDK;
  - Support all UEFI and PI development needs. Support UEFI 2.5 and PI 1.4 Spec.
  - Separate tool code from source code, use Python for valude added tools
  - Build existing EDK modules via EDK Compatibility Package (ECP)
  - UDk source suport different tol-chains such as Microsoft VC, GUN GCC and Intel ICC to build.
  - Packages are the minimal unit of distribution. It is the basic unit of code release.
  - Library Class / Library Instance provide different implementations for the same functionality
  - Platform Configuration Database (PCD) provides uniform configuration Inrterface for module writers.

7. What is a Package?
  - A Package is a group od 0 or more modules. Can be just definitions
  - Example package concepts:
      Drivers, libraries, and applications relating to specific hardware
      Drivers, libraries, and applications relating to UEFI Sepc.
  - Modules within may be dependant on other packages for definitons or elements
      All modules will reference the "root" package
  - Include files may also be contained in a Package.
    Standard spec
    PPI
    Protocols


















